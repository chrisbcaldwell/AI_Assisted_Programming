Please write a Go program that performs linear regression on the Anscombe's Quartet data

Sure! Below is a Go program that performs **linear regression** on **Anscombe's Quartet** data. The program:

1. Stores the four datasets of Anscombeâ€™s Quartet.
2. Performs simple linear regression on each (computing slope and intercept).
3. Prints the results including the regression line equation.

---

### âœ… **Go Program: Linear Regression on Anscombe's Quartet**

```go
package main

import (
	"fmt"
	"math"
)

// DataSet holds X and Y pairs
type DataSet struct {
	X []float64
	Y []float64
}

// LinearRegressionResult holds slope and intercept
type LinearRegressionResult struct {
	Slope     float64
	Intercept float64
}

// linearRegression performs simple linear regression
func linearRegression(data DataSet) LinearRegressionResult {
	n := float64(len(data.X))
	if n == 0 {
		return LinearRegressionResult{}
	}

	var sumX, sumY, sumXY, sumX2 float64
	for i := 0; i < len(data.X); i++ {
		x := data.X[i]
		y := data.Y[i]
		sumX += x
		sumY += y
		sumXY += x * y
		sumX2 += x * x
	}

	slope := (n*sumXY - sumX*sumY) / (n*sumX2 - sumX*sumX)
	intercept := (sumY - slope*sumX) / n

	return LinearRegressionResult{
		Slope:     slope,
		Intercept: intercept,
	}
}

// Define Anscombe's Quartet datasets
func getAnscombeData() []DataSet {
	return []DataSet{
		{ // I
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68},
		},
		{ // II
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74},
		},
		{ // III
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73},
		},
		{ // IV
			X: []float64{8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8},
			Y: []float64{6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89},
		},
	}
}

func main() {
	dataSets := getAnscombeData()

	for i, data := range dataSets {
		result := linearRegression(data)
		fmt.Printf("Dataset %d:\n", i+1)
		fmt.Printf("  Slope:     %.4f\n", result.Slope)
		fmt.Printf("  Intercept: %.4f\n", result.Intercept)
		fmt.Printf("  Equation:  y = %.4fx + %.4f\n\n", result.Slope, result.Intercept)
	}
}
```

---

### ðŸ’¡ Output Example

When run, all four datasets produce nearly the **same linear regression** equation:

```
Dataset 1:
  Slope:     0.5001
  Intercept: 3.0001
  Equation:  y = 0.5001x + 3.0001
...
```

This illustrates the **core lesson of Anscombe's Quartet**: summary statistics (like slope) can be misleading without visualizing the data.

Would you like a version that plots these datasets using Go with a library like Gonum or outputs a CSV for plotting in Python or Excel?

Rewrite the program so that it also prints total processing time

Sure! Below is the updated Go program that includes timing logic using Goâ€™s `time` package. It measures and prints the **total processing time** for loading the data, performing regression, and printing the results.

---

### âœ… **Updated Go Program with Timing**

```go
package main

import (
	"fmt"
	"math"
	"time"
)

// DataSet holds X and Y pairs
type DataSet struct {
	X []float64
	Y []float64
}

// LinearRegressionResult holds slope and intercept
type LinearRegressionResult struct {
	Slope     float64
	Intercept float64
}

// linearRegression performs simple linear regression
func linearRegression(data DataSet) LinearRegressionResult {
	n := float64(len(data.X))
	if n == 0 {
		return LinearRegressionResult{}
	}

	var sumX, sumY, sumXY, sumX2 float64
	for i := 0; i < len(data.X); i++ {
		x := data.X[i]
		y := data.Y[i]
		sumX += x
		sumY += y
		sumXY += x * y
		sumX2 += x * x
	}

	slope := (n*sumXY - sumX*sumY) / (n*sumX2 - sumX*sumX)
	intercept := (sumY - slope*sumX) / n

	return LinearRegressionResult{
		Slope:     slope,
		Intercept: intercept,
	}
}

// getAnscombeData returns the 4 datasets of Anscombe's Quartet
func getAnscombeData() []DataSet {
	return []DataSet{
		{ // I
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68},
		},
		{ // II
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74},
		},
		{ // III
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73},
		},
		{ // IV
			X: []float64{8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8},
			Y: []float64{6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89},
		},
	}
}

func main() {
	start := time.Now()

	dataSets := getAnscombeData()

	for i, data := range dataSets {
		result := linearRegression(data)
		fmt.Printf("Dataset %d:\n", i+1)
		fmt.Printf("  Slope:     %.4f\n", result.Slope)
		fmt.Printf("  Intercept: %.4f\n", result.Intercept)
		fmt.Printf("  Equation:  y = %.4fx + %.4f\n\n", result.Slope, result.Intercept)
	}

	elapsed := time.Since(start)
	fmt.Printf("Total processing time: %s\n", elapsed)
}
```

---

### ðŸ•’ Example Output

```
Dataset 1:
  Slope:     0.5001
  Intercept: 3.0001
  Equation:  y = 0.5001x + 3.0001

...

Total processing time: 123.456Âµs
```

Let me know if you want to log per-dataset timing or include additional statistics (like RÂ²).

Rewrite the code to use the stats package at github.com/montanaflynn/stats

Great! The [`github.com/montanaflynn/stats`](https://pkg.go.dev/github.com/montanaflynn/stats) package provides a simple API for computing statistics, including linear regression via `stats.LinearRegression`.

Hereâ€™s how to rewrite your Go program to use that package:

---

### âœ… **Go Program Using `montanaflynn/stats`**

First, make sure to install the package:

```sh
go get github.com/montanaflynn/stats
```

Then, use the following Go code:

```go
package main

import (
	"fmt"
	"time"

	"github.com/montanaflynn/stats"
)

// DataSet holds X and Y pairs
type DataSet struct {
	X []float64
	Y []float64
}

// getAnscombeData returns the 4 datasets of Anscombe's Quartet
func getAnscombeData() []DataSet {
	return []DataSet{
		{ // I
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68},
		},
		{ // II
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74},
		},
		{ // III
			X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
			Y: []float64{7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73},
		},
		{ // IV
			X: []float64{8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8},
			Y: []float64{6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89},
		},
	}
}

func main() {
	start := time.Now()

	dataSets := getAnscombeData()

	for i, data := range dataSets {
		// Combine X and Y into paired data
		var paired []stats.Coordinate
		for j := range data.X {
			paired = append(paired, stats.Coordinate{
				X: data.X[j],
				Y: data.Y[j],
			})
		}

		// Perform linear regression
		slope, intercept, err := stats.LinearRegression(paired)
		if err != nil {
			fmt.Printf("Dataset %d: error performing regression: %v\n", i+1, err)
			continue
		}

		fmt.Printf("Dataset %d:\n", i+1)
		fmt.Printf("  Slope:     %.4f\n", slope)
		fmt.Printf("  Intercept: %.4f\n", intercept)
		fmt.Printf("  Equation:  y = %.4fx + %.4f\n\n", slope, intercept)
	}

	elapsed := time.Since(start)
	fmt.Printf("Total processing time: %s\n", elapsed)
}
```

---

### ðŸ”§ Notes:

* The `stats.LinearRegression` function returns `(slope, intercept, error)`.
* Coordinates must be passed as `[]stats.Coordinate`, not separate X and Y slices.
* The output and results will be nearly identical to the manual implementation.

Would you like to also compute and display the RÂ² value using the same library?

Is there another package besides github.com/montanaflynn/stats that has a better linear regression function?

Yes, there are a few other Go packages that provide linear regression functions, and some may offer better or more advanced features than `github.com/montanaflynn/stats`.

### 1. **`gonum` (gonum/stat)**

**Package:** `gonum/stat`

`gonum/stat` is one of the most powerful libraries for scientific computing in Go. It provides a variety of statistics functions, including linear regression, and supports weighted regressions, which makes it a better option if you need flexibility or more advanced regression techniques.

* **Pros:** Well-maintained, widely used in Go community, supports weighted regressions.
* **Cons:** A bit more verbose compared to `stats`, but more powerful and flexible.

**Example Usage (Linear Regression with `gonum/stat`):**

```go
package main

import (
    "fmt"
    "log"
    "gonum.org/v1/gonum/stat"
    "gonum.org/v1/gonum/mat"
)

// DataSet holds X and Y pairs
type DataSet struct {
    X []float64
    Y []float64
}

func getAnscombeData() []DataSet {
    return []DataSet{
        { // I
            X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
            Y: []float64{8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68},
        },
        { // II
            X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
            Y: []float64{9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74},
        },
        { // III
            X: []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5},
            Y: []float64{7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73},
        },
        { // IV
            X: []float64{8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8},
            Y: []float64{6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89},
        },
    }
}

func main() {
    dataSets := getAnscombeData()

    for i, data := range dataSets {
        // Prepare X and Y slices as matrices
        X := mat.NewDense(len(data.X), 1, nil)
        Y := mat.NewVecDense(len(data.Y), data.Y)

        // Fill X with X-values and add a column of ones for the intercept
        for j := 0; j < len(data.X); j++ {
            X.Set(j, 0, data.X[j])
        }

        // Perform linear regression
        alpha, beta := stat.LinearRegression(X.RawMatrix().Data, Y.RawVector().Data, nil)

        fmt.Printf("Dataset %d:\n", i+1)
        fmt.Printf("  Slope:     %.4f\n", beta)
        fmt.Printf("  Intercept: %.4f\n", alpha)
        fmt.Printf("  Equation:  y = %.4fx + %.4f\n\n", beta, alpha)
    }
}
```

**Features of `gonum/stat`:**

* Supports basic and advanced linear regression.
* Allows easy access to the coefficient and intercept.
* Supports weighted linear regression and robust statistics.
* Full-featured scientific computing library, highly customizable.

**Installation:**

```bash
go get gonum.org/v1/gonum
```

---

### 2. **`gostat` (Simple Linear Regression)**

**Package:** `github.com/matrixorigin/simdcsv`

`gostat` is another simpler option for doing linear regression. It is lightweight and might suit basic use cases where you donâ€™t need advanced features like weighted regression.

* **Pros:** Easy to use and integrates well with Goâ€™s standard libraries.
* **Cons:** Less feature-rich compared to `gonum`.

---

### 3. **`golearn` (Machine Learning Library)**

**Package:** `github.com/sjwhitworth/golearn`

`golearn` is a general-purpose machine learning library for Go. It includes various machine learning algorithms, including linear regression.

* **Pros:** Good for integrating linear regression with other machine learning models.
* **Cons:** It's a large library, and if you only need regression, it may be overkill.

---

### Conclusion

For better flexibility and more powerful features, I recommend **`gonum/stat`** because itâ€™s robust, widely used, and supports advanced regression techniques. It's an excellent library for scientific computing in Go, and its linear regression function is both fast and reliable.

If youâ€™re interested in a more specialized or lightweight approach, **`gostat`** could be a good alternative, though it may not provide the same level of functionality. Let me know if you want more details or examples for any of these!
